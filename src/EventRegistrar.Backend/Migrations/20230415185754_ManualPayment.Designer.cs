// <auto-generated />
using System;
using EventRegistrar.Backend.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventRegistrar.Backend.Migrations
{
    [DbContext(typeof(EventRegistratorDbContext))]
    [Migration("20230415185754_ManualPayment")]
    partial class ManualPayment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventRegistrar.Backend.Authentication.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdentityProvider")
                        .HasColumnType("int");

                    b.Property<string>("IdentityProviderUserIdentifier")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountIban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PredecessorEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("PredecessorEventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.UsersInEvents.AccessRequests.AccessToEventRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Identifier")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("IdentityProvider")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("RequestReceived")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RequestText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Response")
                        .HasColumnType("int");

                    b.Property<string>("ResponseText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<Guid?>("UserId_Requestor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId_Responder")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.HasIndex("UserId_Requestor");

                    b.HasIndex("UserId_Responder");

                    b.ToTable("AccessToEventRequests", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.UsersInEvents.UserInEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.HasIndex("UserId");

                    b.ToTable("UsersInEvents", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Infrastructure.Configuration.EventConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("EventConfigurations", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Infrastructure.DataAccess.DirtyTags.DirtyTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DirtyMoment")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Entity", "EntityId", "Segment");

                    b.ToTable("DirtyTags", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Infrastructure.DataAccess.ReadModels.ReadModel", b =>
                {
                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("ContentJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("QueryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("RowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Sequence");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Sequence"));

                    b.HasIndex("QueryName", "EventId", "RowId")
                        .IsUnique()
                        .HasFilter("[RowId] IS NOT NULL");

                    b.ToTable("ReadModels", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Infrastructure.DomainEvents.PersistedDomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DomainEventId_Parent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.HasIndex("Timestamp");

                    b.ToTable("DomainEvents", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Bulk.BulkMailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BulkMailKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("MailingAudience")
                        .HasColumnType("int");

                    b.Property<Guid?>("RegistrableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("RegistrableId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.HasIndex("EventId", "BulkMailKey", "Language")
                        .IsUnique()
                        .HasFilter("[Language] IS NOT NULL");

                    b.ToTable("BulkMailTemplates", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Feedback.MailEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BounceClassification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EMail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExternalIdentifier")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("MailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("MailId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("MailEvents", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Feedback.RawMailEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Processed")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RawMailEvents", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Import.ImportedMail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentPlainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Imported")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MessageIdentifier")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Recipients")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SendGridMessageId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SenderMail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("ImportedMails", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Import.ImportedMailToRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImportedMailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ImportedMailId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("ImportedMailsToRegistrations", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Mail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AutoMailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BulkMailKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BulkMailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentPlainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Discarded")
                        .HasColumnType("bit");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Recipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SendGridMessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderMail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Sent")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("Withhold")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("AutoMailTemplateId");

                    b.HasIndex("BulkMailTemplateId");

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Mails", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.MailToRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("MailId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("MailsToRegistrations", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Templates.AutoMailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("ReleaseImmediately")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("Subject")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("AutoMailTemplates", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.Fetch.RawBankStatementsFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContractIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Imported")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Processed")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("Server")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RawBankStatementsFiles", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.IncomingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DebitorIban")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DebitorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("PaymentSlipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("PaymentSlipId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("IncomingPayments", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.OutgoingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreditorIban")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreditorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("OutgoingPayments", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Charges")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ignore")
                        .HasColumnType("bit");

                    b.Property<string>("Info")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("InstructionIdentification")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PaymentsFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RawXml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecognizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Repaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<bool>("Settled")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("PaymentsFileId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.PaymentsFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountIban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("BookingsFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BookingsTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("PaymentsFiles", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.Slips.PaymentSlip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileBinary")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Filename")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("PaymentSlips", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.PaymentAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("IncomingPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OutgoingPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentAssignmentId_Counter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PayoutRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("IncomingPaymentId");

                    b.HasIndex("OutgoingPaymentId");

                    b.HasIndex("PaymentAssignmentId_Counter");

                    b.HasIndex("PayoutRequestId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("PaymentAssignments", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Refunds.PayoutRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IbanProposed")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("PayoutRequests", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.PhoneMessages.Sms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountSid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ErrorCode")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RawData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Received")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("Sent")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("SmsSid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmsStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Sms");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Compositions.RegistrableComposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrableId_Contains")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrableId");

                    b.HasIndex("RegistrableId_Contains");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RegistrableCompositions", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Pricing.PricePackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowAsAutomaticFallback")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowAsFallback")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowAsManualFallback")
                        .HasColumnType("bit");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FallbackPriority")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("PricePackages", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Pricing.PricePackagePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PriceAdjustment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PricePackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SelectionType")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("PricePackageId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("PricePackagePart", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Pricing.RegistrableInPricePackagePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PricePackagePartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("PricePackagePartId");

                    b.HasIndex("RegistrableId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RegistrableInPricePackageParts", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Reductions.Reduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ActivatedByReduction")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OnlyForRole")
                        .HasColumnType("int");

                    b.Property<Guid>("RegistrableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrableId1_ReductionActivatedIfCombinedWith")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrableId2_ReductionActivatedIfCombinedWith")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrableId");

                    b.HasIndex("RegistrableId1_ReductionActivatedIfCombinedWith");

                    b.HasIndex("RegistrableId2_ReductionActivatedIfCombinedWith");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Reductions", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Registrable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutomaticPromotionFromWaitingList")
                        .HasColumnType("bit");

                    b.Property<string>("CheckinListColumn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasWaitingList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCore")
                        .HasColumnType("bit");

                    b.Property<int?>("MaximumAllowedImbalance")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumDoubleSeats")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumSingleSeats")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameSecondary")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ReducedPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int?>("ShowInMailListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Registrables", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.SpotMailLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("RegistrableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrableId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("SpotMailLines", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Tags.RegistrableTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FallbackText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int>("SortKey")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RegistrableTags", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.FormPaths.FormPath", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfigurationJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartnerConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegistrationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("SingleConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrationFormId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("FormPaths", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.GoogleForms.RawRegistrationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventAcronym")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FormExternalIdentifier")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("Processed")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReceivedMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RawRegistrationForms", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.Mappings.MultiQuestionOptionMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionOptionIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrableCombinedIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RegistrableCombinedIdsJson");

                    b.Property<Guid>("RegistrationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int>("SortKey")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrationFormId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("MultiQuestionOptionMappings", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.Mappings.QuestionOptionMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("QuestionOptionId");

                    b.HasIndex("RegistrableId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("QuestionOptionMappings", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int?>("Mapping")
                        .HasColumnType("int");

                    b.Property<Guid>("RegistrationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("TemplateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrationFormId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("QuestionId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("QuestionOptions", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.RegistrationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RegistrationForms", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Cancel.RegistrationCancellation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Received")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Refund")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RefundPercentage")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RegistrationCancellations", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.IndividualReductions.IndividualReduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.HasIndex("UserId");

                    b.ToTable("IndividualReductions", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Raw.RawRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EventAcronym")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FormExternalIdentifier")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastProcessingError")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Processed")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReceivedMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationExternalIdentifier")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("RawRegistrations", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("AdmittedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalIdentifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("ExternalTimestamp")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("FallbackToPartyPass")
                        .HasColumnType("bit");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOnWaitingList")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReduced")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("PartnerNormalized")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartnerOriginal")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNormalized")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("PricePackageId_ManualFallback")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PricePackageIds_Admitted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price_Admitted")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price_AdmittedAndReduced")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Price_Original")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReadableIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("ReceivedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RegistrationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrationId_Partner")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RemarksProcessed")
                        .HasColumnType("bit");

                    b.Property<int>("ReminderLevel")
                        .HasColumnType("int");

                    b.Property<string>("RespondentEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RespondentFirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RespondentLastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.Property<string>("SoldOutMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("WillPayAtCheckin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("EventId");

                    b.HasIndex("PricePackageId_ManualFallback");

                    b.HasIndex("RegistrationFormId");

                    b.HasIndex("RegistrationId_Partner");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Registrations", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Responses.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuestionOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ResponseString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionOptionId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Responses", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Spots.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("FirstPartnerJoined")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartnerSpot")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWaitingList")
                        .HasColumnType("bit");

                    b.Property<string>("PartnerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegistrableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrationId_Follower")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Sequence"));

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("RegistrableId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("RegistrationId_Follower");

                    b.HasIndex("Sequence")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Sequence"));

                    b.ToTable("Spots", (string)null);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.Event", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "PredecessorEvent")
                        .WithMany()
                        .HasForeignKey("PredecessorEventId");

                    b.Navigation("PredecessorEvent");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.UsersInEvents.AccessRequests.AccessToEventRequest", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("AccessRequests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Authentication.Users.User", "User_Requestor")
                        .WithMany()
                        .HasForeignKey("UserId_Requestor");

                    b.HasOne("EventRegistrar.Backend.Authentication.Users.User", "User_Responder")
                        .WithMany()
                        .HasForeignKey("UserId_Responder");

                    b.Navigation("Event");

                    b.Navigation("User_Requestor");

                    b.Navigation("User_Responder");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.UsersInEvents.UserInEvent", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("Users")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Authentication.Users.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Infrastructure.Configuration.EventConfiguration", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("Configurations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Infrastructure.DomainEvents.PersistedDomainEvent", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Bulk.BulkMailTemplate", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("BulkMailTemplates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable")
                        .WithMany()
                        .HasForeignKey("RegistrableId");

                    b.Navigation("Event");

                    b.Navigation("Registrable");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Feedback.MailEvent", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Mailing.Mail", "Mail")
                        .WithMany("Events")
                        .HasForeignKey("MailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mail");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Import.ImportedMail", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Import.ImportedMailToRegistration", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Mailing.Import.ImportedMail", "Mail")
                        .WithMany("Registrations")
                        .HasForeignKey("ImportedMailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("ImportedMails")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mail");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Mail", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Mailing.Templates.AutoMailTemplate", "AutoMailTemplate")
                        .WithMany("Mails")
                        .HasForeignKey("AutoMailTemplateId");

                    b.HasOne("EventRegistrar.Backend.Mailing.Bulk.BulkMailTemplate", "BulkMailTemplate")
                        .WithMany("Mails")
                        .HasForeignKey("BulkMailTemplateId");

                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("AutoMailTemplate");

                    b.Navigation("BulkMailTemplate");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.MailToRegistration", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Mailing.Mail", "Mail")
                        .WithMany("Registrations")
                        .HasForeignKey("MailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("Mails")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mail");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Templates.AutoMailTemplate", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("AutoMailTemplates")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.IncomingPayment", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Payments.Files.Payment", "Payment")
                        .WithOne("Incoming")
                        .HasForeignKey("EventRegistrar.Backend.Payments.Files.IncomingPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Payments.Files.Slips.PaymentSlip", "PaymentSlip")
                        .WithMany()
                        .HasForeignKey("PaymentSlipId");

                    b.Navigation("Payment");

                    b.Navigation("PaymentSlip");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.OutgoingPayment", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Payments.Files.Payment", "Payment")
                        .WithOne("Outgoing")
                        .HasForeignKey("EventRegistrar.Backend.Payments.Files.OutgoingPayment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.Payment", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("EventRegistrar.Backend.Payments.Files.PaymentsFile", "PaymentsFile")
                        .WithMany()
                        .HasForeignKey("PaymentsFileId");

                    b.Navigation("Event");

                    b.Navigation("PaymentsFile");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.PaymentsFile", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.Slips.PaymentSlip", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.PaymentAssignment", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Payments.Files.IncomingPayment", "IncomingPayment")
                        .WithMany("Assignments")
                        .HasForeignKey("IncomingPaymentId");

                    b.HasOne("EventRegistrar.Backend.Payments.Files.OutgoingPayment", "OutgoingPayment")
                        .WithMany("Assignments")
                        .HasForeignKey("OutgoingPaymentId");

                    b.HasOne("EventRegistrar.Backend.Payments.PaymentAssignment", "PaymentAssignment_Counter")
                        .WithMany()
                        .HasForeignKey("PaymentAssignmentId_Counter");

                    b.HasOne("EventRegistrar.Backend.Payments.Refunds.PayoutRequest", "PayoutRequest")
                        .WithMany("Assignments")
                        .HasForeignKey("PayoutRequestId");

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("PaymentAssignments")
                        .HasForeignKey("RegistrationId");

                    b.Navigation("IncomingPayment");

                    b.Navigation("OutgoingPayment");

                    b.Navigation("PaymentAssignment_Counter");

                    b.Navigation("PayoutRequest");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Refunds.PayoutRequest", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("PayoutRequests")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("EventRegistrar.Backend.PhoneMessages.Sms", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("Sms")
                        .HasForeignKey("RegistrationId");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Compositions.RegistrableComposition", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable")
                        .WithMany("Compositions")
                        .HasForeignKey("RegistrableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable_Contains")
                        .WithMany()
                        .HasForeignKey("RegistrableId_Contains")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Registrable");

                    b.Navigation("Registrable_Contains");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Pricing.PricePackage", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Pricing.PricePackagePart", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrables.Pricing.PricePackage", "PricePackage")
                        .WithMany("Parts")
                        .HasForeignKey("PricePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PricePackage");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Pricing.RegistrableInPricePackagePart", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrables.Pricing.PricePackagePart", "PricePackagePart")
                        .WithMany("Registrables")
                        .HasForeignKey("PricePackagePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable")
                        .WithMany()
                        .HasForeignKey("RegistrableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PricePackagePart");

                    b.Navigation("Registrable");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Reductions.Reduction", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable")
                        .WithMany("Reductions")
                        .HasForeignKey("RegistrableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable1_ReductionActivatedIfCombinedWith")
                        .WithMany()
                        .HasForeignKey("RegistrableId1_ReductionActivatedIfCombinedWith");

                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable2_ReductionActivatedIfCombinedWith")
                        .WithMany()
                        .HasForeignKey("RegistrableId2_ReductionActivatedIfCombinedWith");

                    b.Navigation("Registrable");

                    b.Navigation("Registrable1_ReductionActivatedIfCombinedWith");

                    b.Navigation("Registrable2_ReductionActivatedIfCombinedWith");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Registrable", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("Registrables")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.SpotMailLine", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable")
                        .WithMany()
                        .HasForeignKey("RegistrableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registrable");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Tags.RegistrableTag", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.FormPaths.FormPath", b =>
                {
                    b.HasOne("EventRegistrar.Backend.RegistrationForms.RegistrationForm", "RegistrationForm")
                        .WithMany("FormPaths")
                        .HasForeignKey("RegistrationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationForm");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.Mappings.MultiQuestionOptionMapping", b =>
                {
                    b.HasOne("EventRegistrar.Backend.RegistrationForms.RegistrationForm", "RegistrationForm")
                        .WithMany("MultiMappings")
                        .HasForeignKey("RegistrationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationForm");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.Mappings.QuestionOptionMapping", b =>
                {
                    b.HasOne("EventRegistrar.Backend.RegistrationForms.Questions.QuestionOption", "QuestionOption")
                        .WithMany("Mappings")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable")
                        .WithMany("QuestionOptionMappings")
                        .HasForeignKey("RegistrableId");

                    b.Navigation("QuestionOption");

                    b.Navigation("Registrable");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.Question", b =>
                {
                    b.HasOne("EventRegistrar.Backend.RegistrationForms.RegistrationForm", "RegistrationForm")
                        .WithMany("Questions")
                        .HasForeignKey("RegistrationFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationForm");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.QuestionOption", b =>
                {
                    b.HasOne("EventRegistrar.Backend.RegistrationForms.Questions.Question", "Question")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.RegistrationForm", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Cancel.RegistrationCancellation", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("Cancellations")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.IndividualReductions.IndividualReduction", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("IndividualReductions")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Authentication.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Registration", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrables.Pricing.PricePackage", "PricePackage_ManualFallback")
                        .WithMany()
                        .HasForeignKey("PricePackageId_ManualFallback");

                    b.HasOne("EventRegistrar.Backend.RegistrationForms.RegistrationForm", "RegistrationForm")
                        .WithMany()
                        .HasForeignKey("RegistrationFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration_Partner")
                        .WithMany()
                        .HasForeignKey("RegistrationId_Partner");

                    b.Navigation("Event");

                    b.Navigation("PricePackage_ManualFallback");

                    b.Navigation("RegistrationForm");

                    b.Navigation("Registration_Partner");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Responses.Response", b =>
                {
                    b.HasOne("EventRegistrar.Backend.RegistrationForms.Questions.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId");

                    b.HasOne("EventRegistrar.Backend.RegistrationForms.Questions.QuestionOption", "QuestionOption")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionOptionId");

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("Responses")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("QuestionOption");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Spots.Seat", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable")
                        .WithMany("Spots")
                        .HasForeignKey("RegistrableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("Seats_AsLeader")
                        .HasForeignKey("RegistrationId");

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration_Follower")
                        .WithMany("Seats_AsFollower")
                        .HasForeignKey("RegistrationId_Follower");

                    b.Navigation("Registrable");

                    b.Navigation("Registration");

                    b.Navigation("Registration_Follower");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Authentication.Users.User", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.Event", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("AutoMailTemplates");

                    b.Navigation("BulkMailTemplates");

                    b.Navigation("Configurations");

                    b.Navigation("Registrables");

                    b.Navigation("Registrations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Bulk.BulkMailTemplate", b =>
                {
                    b.Navigation("Mails");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Import.ImportedMail", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Mail", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Mailing.Templates.AutoMailTemplate", b =>
                {
                    b.Navigation("Mails");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.IncomingPayment", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.OutgoingPayment", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Files.Payment", b =>
                {
                    b.Navigation("Incoming");

                    b.Navigation("Outgoing");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.Refunds.PayoutRequest", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Pricing.PricePackage", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Pricing.PricePackagePart", b =>
                {
                    b.Navigation("Registrables");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Registrable", b =>
                {
                    b.Navigation("Compositions");

                    b.Navigation("QuestionOptionMappings");

                    b.Navigation("Reductions");

                    b.Navigation("Spots");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.Question", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.Questions.QuestionOption", b =>
                {
                    b.Navigation("Mappings");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.RegistrationForm", b =>
                {
                    b.Navigation("FormPaths");

                    b.Navigation("MultiMappings");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Registration", b =>
                {
                    b.Navigation("Cancellations");

                    b.Navigation("ImportedMails");

                    b.Navigation("IndividualReductions");

                    b.Navigation("Mails");

                    b.Navigation("PaymentAssignments");

                    b.Navigation("PayoutRequests");

                    b.Navigation("Responses");

                    b.Navigation("Seats_AsFollower");

                    b.Navigation("Seats_AsLeader");

                    b.Navigation("Sms");
                });
#pragma warning restore 612, 618
        }
    }
}
