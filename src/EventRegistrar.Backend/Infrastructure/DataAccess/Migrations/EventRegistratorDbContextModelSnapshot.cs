// <auto-generated />
using System;
using EventRegistrar.Backend.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventRegistrar.Backend.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(EventRegistratorDbContext))]
    partial class EventRegistratorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventRegistrar.Backend.Authentication.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("IdentityProvider");

                    b.Property<string>("IdentityProviderUserIdentifier");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountIban");

                    b.Property<string>("Acronym");

                    b.Property<string>("Currency");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<string>("TwilioAccountSid");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.UsersInEvents.AccessRequests.AccessToEventRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(200);

                    b.Property<Guid>("EventId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200);

                    b.Property<string>("Identifier")
                        .HasMaxLength(200);

                    b.Property<int>("IdentityProvider");

                    b.Property<string>("LastName")
                        .HasMaxLength(200);

                    b.Property<DateTime>("RequestReceived");

                    b.Property<string>("RequestText");

                    b.Property<int?>("Response");

                    b.Property<string>("ResponseText");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("UserId_Requestor");

                    b.Property<Guid?>("UserId_Responder");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("AccessToEventRequests");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.UsersInEvents.UserInEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EventId");

                    b.Property<int>("Role");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersInEvents");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.PaymentAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<Guid>("ReceivedPaymentId");

                    b.Property<Guid>("RegistrationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ReceivedPaymentId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PaymentAssignments");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.PaymentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountIban");

                    b.Property<decimal?>("Balance");

                    b.Property<DateTime?>("BookingsFrom");

                    b.Property<DateTime?>("BookingsTo");

                    b.Property<string>("Content");

                    b.Property<string>("Currency");

                    b.Property<Guid?>("EventId");

                    b.Property<string>("FileId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("PaymentFiles");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.ReceivedPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("BookingDate");

                    b.Property<string>("Currency");

                    b.Property<string>("Info");

                    b.Property<Guid>("PaymentFileId");

                    b.Property<string>("RecognizedEmail");

                    b.Property<string>("Reference");

                    b.Property<Guid?>("RegistrationId_Payer");

                    b.Property<decimal?>("Repaid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Settled");

                    b.HasKey("Id");

                    b.HasIndex("PaymentFileId");

                    b.ToTable("ReceivedPayments");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrables.Registrable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckinListColumn");

                    b.Property<Guid>("EventId");

                    b.Property<bool>("HasWaitingList");

                    b.Property<bool>("IsCore");

                    b.Property<int?>("MaximumAllowedImbalance");

                    b.Property<int?>("MaximumDoubleSeats");

                    b.Property<int?>("MaximumSingleSeats");

                    b.Property<string>("Name");

                    b.Property<decimal?>("Price");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("ShowInMailListOrder");

                    b.HasKey("Id");

                    b.ToTable("Registrables");
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.RegistrationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EventId");

                    b.Property<string>("ExternalIdentifier");

                    b.Property<string>("Language");

                    b.Property<Guid?>("QuestionId_FirstName");

                    b.Property<Guid?>("QuestionId_LastName");

                    b.Property<Guid?>("QuestionId_Phone");

                    b.Property<Guid?>("QuestionId_Remarks");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("RegistrationForms");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AdmittedAt");

                    b.Property<Guid>("EventId");

                    b.Property<string>("ExternalIdentifier");

                    b.Property<DateTime>("ExternalTimestamp");

                    b.Property<bool>("FallbackToPartyPass");

                    b.Property<bool?>("IsWaitingList");

                    b.Property<string>("Language");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneNormalized");

                    b.Property<decimal?>("Price");

                    b.Property<DateTime>("ReceivedAt");

                    b.Property<Guid>("RegistrationFormId");

                    b.Property<string>("Remarks");

                    b.Property<bool>("RemarksProcessed");

                    b.Property<int>("ReminderLevel");

                    b.Property<string>("RespondentEmail");

                    b.Property<string>("RespondentFirstName");

                    b.Property<string>("RespondentLastName");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SoldOutMessage");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationFormId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Seats.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FirstPartnerJoined");

                    b.Property<bool>("IsCancelled");

                    b.Property<bool>("IsWaitingList");

                    b.Property<string>("PartnerEmail");

                    b.Property<Guid>("RegistrableId");

                    b.Property<Guid?>("RegistrationId");

                    b.Property<Guid?>("RegistrationId_Follower");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("RegistrableId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("RegistrationId_Follower");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.UsersInEvents.AccessRequests.AccessToEventRequest", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("AccessRequests")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Events.UsersInEvents.UserInEvent", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany("Users")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventRegistrar.Backend.Authentication.Users.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.PaymentAssignment", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Payments.ReceivedPayment", "ReceivedPayment")
                        .WithMany("Assignments")
                        .HasForeignKey("ReceivedPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("Payments")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Payments.ReceivedPayment", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Payments.PaymentFile", "PaymentFile")
                        .WithMany()
                        .HasForeignKey("PaymentFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventRegistrar.Backend.RegistrationForms.RegistrationForm", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("EventRegistrar.Backend.Registrations.Registration", b =>
                {
                    b.HasOne("EventRegistrar.Backend.RegistrationForms.RegistrationForm", "RegistrationForm")
                        .WithMany()
                        .HasForeignKey("RegistrationFormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventRegistrar.Backend.Seats.Seat", b =>
                {
                    b.HasOne("EventRegistrar.Backend.Registrables.Registrable", "Registrable")
                        .WithMany("Seats")
                        .HasForeignKey("RegistrableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration")
                        .WithMany("Seats_AsLeader")
                        .HasForeignKey("RegistrationId");

                    b.HasOne("EventRegistrar.Backend.Registrations.Registration", "Registration_Follower")
                        .WithMany("Seats_AsFollower")
                        .HasForeignKey("RegistrationId_Follower");
                });
#pragma warning restore 612, 618
        }
    }
}
