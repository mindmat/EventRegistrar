<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptedMail" xml:space="preserve">
    <value>Accepted mail</value>
  </data>
  <data name="AngeboteneSprachen" xml:space="preserve">
    <value>Offered languages</value>
  </data>
  <data name="AssignIncoming" xml:space="preserve">
    <value>Assign incoming payment</value>
  </data>
  <data name="AssignOutgoing" xml:space="preserve">
    <value>Assign outgoing payment</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Deposits" xml:space="preserve">
    <value>Deposits</value>
  </data>
  <data name="EMail" xml:space="preserve">
    <value>Email address</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="FirstName" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="Follower" xml:space="preserve">
    <value>Follower</value>
  </data>
  <data name="German" xml:space="preserve">
    <value>German</value>
  </data>
  <data name="Hide" xml:space="preserve">
    <value>Hide:</value>
  </data>
  <data name="Ignored" xml:space="preserve">
    <value>Ignored</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LastMessage" xml:space="preserve">
    <value>Last sent message</value>
  </data>
  <data name="LastMessageTS" xml:space="preserve">
    <value>{{daysAgo}} ago: {{type}}</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="Leader" xml:space="preserve">
    <value>Leader</value>
  </data>
  <data name="MailPlaceholder" xml:space="preserve">
    <value>Mail placeholder</value>
  </data>
  <data name="MailPlaceholder_AcceptedDate" xml:space="preserve">
    <value>Date Payment Request</value>
  </data>
  <data name="MailPlaceholder_CancellationReason" xml:space="preserve">
    <value>Reason of Cancellation</value>
  </data>
  <data name="MailPlaceholder_DueAmount" xml:space="preserve">
    <value>Due Amount</value>
  </data>
  <data name="MailPlaceholder_FirstName" xml:space="preserve">
    <value>First Name</value>
  </data>
  <data name="MailPlaceholder_LastName" xml:space="preserve">
    <value>Last Name</value>
  </data>
  <data name="MailPlaceholder_OverpaidAmount" xml:space="preserve">
    <value>Overpaid Amount</value>
  </data>
  <data name="MailPlaceholder_PaidAmount" xml:space="preserve">
    <value>Paid Amount</value>
  </data>
  <data name="MailPlaceholder_PartnerName" xml:space="preserve">
    <value>Partner Name</value>
  </data>
  <data name="MailPlaceholder_Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="MailPlaceholder_Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="MailPlaceholder_Reminder1Date" xml:space="preserve">
    <value>Date of First Reminder</value>
  </data>
  <data name="MailPlaceholder_SpotList" xml:space="preserve">
    <value>Spot List</value>
  </data>
  <data name="MailPlaceholder_UnpaidAmount" xml:space="preserve">
    <value>Remark about unpaid amount</value>
  </data>
  <data name="MailSubject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="MailTemplate" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="MailTypeGroup_Confirmation" xml:space="preserve">
    <value>Confirmation</value>
  </data>
  <data name="MailTypeGroup_Payments" xml:space="preserve">
    <value>Payment Differences</value>
  </data>
  <data name="MailTypeGroup_Received" xml:space="preserve">
    <value>Received</value>
  </data>
  <data name="MailTypeGroup_Reminders" xml:space="preserve">
    <value>Reminders</value>
  </data>
  <data name="MailTypeGroup_WaitingList" xml:space="preserve">
    <value>Waiting List</value>
  </data>
  <data name="MailType_MoneyOwed" xml:space="preserve">
    <value>Not enough paid</value>
  </data>
  <data name="MailType_PartnerRegistrationFirstPaid" xml:space="preserve">
    <value>Partner registration: First payment received</value>
  </data>
  <data name="MailType_PartnerRegistrationFirstPartnerAccepted" xml:space="preserve">
    <value>Partner registration: First partner accepted</value>
  </data>
  <data name="MailType_PartnerRegistrationFirstPartnerOnWaitingList" xml:space="preserve">
    <value>Partner registration: First partner on waiting list</value>
  </data>
  <data name="MailType_PartnerRegistrationFirstReminder" xml:space="preserve">
    <value>Partner registration: First Reminder</value>
  </data>
  <data name="MailType_PartnerRegistrationFullyPaid" xml:space="preserve">
    <value>Partner registration paid</value>
  </data>
  <data name="MailType_PartnerRegistrationMatchedAndAccepted" xml:space="preserve">
    <value>Partner registration accepted</value>
  </data>
  <data name="MailType_PartnerRegistrationMatchedOnWaitingList" xml:space="preserve">
    <value>Partner registration on waiting list</value>
  </data>
  <data name="MailType_PartnerRegistrationSecondReminder" xml:space="preserve">
    <value>Partner registration: First Reminder</value>
  </data>
  <data name="MailType_RegistrationReceived" xml:space="preserve">
    <value>Registration received</value>
  </data>
  <data name="MailType_SingleRegistrationAccepted" xml:space="preserve">
    <value>Single registration accepted</value>
  </data>
  <data name="MailType_SingleRegistrationFirstReminder" xml:space="preserve">
    <value>Single registration: First reminder</value>
  </data>
  <data name="MailType_SingleRegistrationFullyPaid" xml:space="preserve">
    <value>Single registration paid</value>
  </data>
  <data name="MailType_SingleRegistrationOnWaitingList" xml:space="preserve">
    <value>Single registration on waiting list</value>
  </data>
  <data name="MailType_SingleRegistrationSecondReminder" xml:space="preserve">
    <value>Single registration: Second reminder</value>
  </data>
  <data name="MailType_SoldOut" xml:space="preserve">
    <value>Sold out</value>
  </data>
  <data name="MailType_TooMuchPaid" xml:space="preserve">
    <value>Too much paid</value>
  </data>
  <data name="MissingAmount" xml:space="preserve">
    <value>Missing amount</value>
  </data>
  <data name="Partner" xml:space="preserve">
    <value>Partner</value>
  </data>
  <data name="PartnerNotPossible" xml:space="preserve">
    <value>Partner registration not possible</value>
  </data>
  <data name="PartnerPossible" xml:space="preserve">
    <value>Partner registration possible</value>
  </data>
  <data name="PaymentProgressTS" xml:space="preserve">
    <value>{{ paid }} paid of total {{ total }}</value>
  </data>
  <data name="Payouts" xml:space="preserve">
    <value>Payouts</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Phone</value>
  </data>
  <data name="Preview" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="Reduction" xml:space="preserve">
    <value>Reduction</value>
  </data>
  <data name="RegistrableSoldOut" xml:space="preserve">
    <value>{0} is sold out</value>
  </data>
  <data name="ReminderMail1" xml:space="preserve">
    <value>Reminder mail 1</value>
  </data>
  <data name="ReminderMail2" xml:space="preserve">
    <value>Reminder mail 2</value>
  </data>
  <data name="Role" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="Role_Follower" xml:space="preserve">
    <value>Follower</value>
  </data>
  <data name="Role_Leader" xml:space="preserve">
    <value>Leader</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SearchByName" xml:space="preserve">
    <value>Search by name</value>
  </data>
  <data name="SearchByNameIbanMessage" xml:space="preserve">
    <value>Search by name, IBAN, message</value>
  </data>
  <data name="SenderAlias" xml:space="preserve">
    <value>Sender Alias</value>
  </data>
  <data name="SenderMail" xml:space="preserve">
    <value>Sender E-mail</value>
  </data>
  <data name="SendReminderMail" xml:space="preserve">
    <value>Send reminder mail</value>
  </data>
  <data name="SendReminderSms" xml:space="preserve">
    <value>Send reminder SMS</value>
  </data>
  <data name="Settled" xml:space="preserve">
    <value>Settled</value>
  </data>
  <data name="SingleNotPossible" xml:space="preserve">
    <value>Single registration not possible</value>
  </data>
  <data name="SinglePossible" xml:space="preserve">
    <value>Single registration possible</value>
  </data>
  <data name="SMS" xml:space="preserve">
    <value>SMS</value>
  </data>
</root>